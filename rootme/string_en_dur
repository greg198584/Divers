gdb$ disass main
Dump of assembler code for function main:
   0x08048414 <+0>:	push   ebp
   0x08048415 <+1>:	mov    ebp,esp
   0x08048417 <+3>:	push   edi
   0x08048418 <+4>:	push   esi
   0x08048419 <+5>:	and    esp,0xfffffff0
   0x0804841c <+8>:	sub    esp,0x10
   0x0804841f <+11>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048422 <+14>:	add    eax,0x4
   0x08048425 <+17>:	mov    eax,DWORD PTR [eax]
   0x08048427 <+19>:	test   eax,eax
   0x08048429 <+21>:	jne    0x804843e <main+42>
   0x0804842b <+23>:	mov    DWORD PTR [esp],0x8048570
   0x08048432 <+30>:	call   0x8048320 <puts@plt>
   0x08048437 <+35>:	mov    eax,0x0
   0x0804843c <+40>:	jmp    0x8048494 <main+128>
   0x0804843e <+42>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048441 <+45>:	add    eax,0x4
   0x08048444 <+48>:	mov    eax,DWORD PTR [eax]
   0x08048446 <+50>:	mov    edx,0x8048598
   0x0804844b <+55>:	mov    ecx,0x8
   0x08048450 <+60>:	mov    esi,edx
   0x08048452 <+62>:	mov    edi,eax
   0x08048454 <+64>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
   0x08048456 <+66>:	seta   dl
   0x08048459 <+69>:	setb   al
   0x0804845c <+72>:	mov    ecx,edx
   0x0804845e <+74>:	sub    cl,al
   0x08048460 <+76>:	mov    eax,ecx
   0x08048462 <+78>:	movsx  eax,al
   0x08048465 <+81>:	test   eax,eax
   0x08048467 <+83>:	jne    0x8048483 <main+111>
   0x08048469 <+85>:	mov    DWORD PTR [esp],0x80485a0
   0x08048470 <+92>:	call   0x8048320 <puts@plt>
   0x08048475 <+97>:	mov    DWORD PTR [esp],0x80485af
   0x0804847c <+104>:	call   0x8048330 <system@plt>
   0x08048481 <+109>:	jmp    0x804848f <main+123>
   0x08048483 <+111>:	mov    DWORD PTR [esp],0x80485ba
   0x0804848a <+118>:	call   0x8048320 <puts@plt>
   0x0804848f <+123>:	mov    eax,0x0
   0x08048494 <+128>:	lea    esp,[ebp-0x8]
   0x08048497 <+131>:	pop    esi
   0x08048498 <+132>:	pop    edi
   0x08048499 <+133>:	pop    ebp
   0x0804849a <+134>:	ret    
End of assembler dump.
gdb$ break *0x08048454
Breakpoint 2 at 0x8048454: file binary3.c, line 11.
gdb$ run coucou
--------------------------------------------------------------------------[regs]
  EAX: 00000002  EBX: B7FD0FF4  ECX: BFFFFD14  EDX: BFFFFCA4  o d I t S z a P c 
  ESI: 00000000  EDI: 00000000  EBP: BFFFFC78  ESP: BFFFFC60  EIP: 0804841F
  CS: 0073  DS: 007B  ES: 007B  FS: 0000  GS: 0033  SS: 007B
[007B:BFFFFC60]----------------------------------------------------------[stack]
BFFFFCB0 : 00 00 00 00  D7 D9 56 DB - C7 FD 26 EC  00 00 00 00 ......V...&.....
BFFFFCA0 : 2C 82 04 08  F4 0F FD B7 - 00 00 00 00  00 00 00 00 ,...............
BFFFFC90 : 00 00 00 00  1C FD FF BF - 20 FD FF BF  00 00 00 00 ........ .......
BFFFFC80 : 02 00 00 00  14 FD FF BF - 20 FD FF BF  58 C8 FD B7 ........ ...X...
BFFFFC70 : 00 00 00 00  00 00 00 00 - 00 00 00 00  D3 44 E4 B7 .............D..
BFFFFC60 : 80 D2 FE B7  00 00 00 00 - A9 84 04 08  F4 0F FD B7 ................
[007B:BFFFFC60]-----------------------------------------------------------[data]
BFFFFC60 : 80 D2 FE B7  00 00 00 00 - A9 84 04 08  F4 0F FD B7 ................
BFFFFC70 : 00 00 00 00  00 00 00 00 - 00 00 00 00  D3 44 E4 B7 .............D..
BFFFFC80 : 02 00 00 00  14 FD FF BF - 20 FD FF BF  58 C8 FD B7 ........ ...X...
BFFFFC90 : 00 00 00 00  1C FD FF BF - 20 FD FF BF  00 00 00 00 ........ .......
BFFFFCA0 : 2C 82 04 08  F4 0F FD B7 - 00 00 00 00  00 00 00 00 ,...............
BFFFFCB0 : 00 00 00 00  D7 D9 56 DB - C7 FD 26 EC  00 00 00 00 ......V...&.....
BFFFFCC0 : 00 00 00 00  00 00 00 00 - 02 00 00 00  60 83 04 08 ............`...
BFFFFCD0 : 00 00 00 00  B0 26 FF B7 - E9 43 E4 B7  F4 EF FF B7 .....&...C......
[0073:0804841F]-----------------------------------------------------------[code]
=> 0x804841f <main+11>:	mov    eax,DWORD PTR [ebp+0xc]
   0x8048422 <main+14>:	add    eax,0x4
   0x8048425 <main+17>:	mov    eax,DWORD PTR [eax]
   0x8048427 <main+19>:	test   eax,eax
   0x8048429 <main+21>:	jne    0x804843e <main+42>
   0x804842b <main+23>:	mov    DWORD PTR [esp],0x8048570
   0x8048432 <main+30>:	call   0x8048320 <puts@plt>
   0x8048437 <main+35>:	mov    eax,0x0
--------------------------------------------------------------------------------

Breakpoint 1, main (argc=2, argv=0xbffffd14) at binary3.c:7
7	in binary3.c
gdb$ x/10c 0x8048598
0x8048598:	76 'L'	51 '3'	51 '3'	84 'T'	72 'H'	52 '4'	88 'X'	0 '\000'
0x80485a0:	65 'A'	99 'c'
gdb$ quit
binary3@challenge02:~$ ./binary3 L33TH4X
Access Granted
sh-4.2$ ls
binary3  binary3.c
sh-4.2$ ls -l
total 12
-r-sr-x--- 1 binary3cracked binary3 8183 mai    4  2013 binary3
---------- 1 binary3        binary3  368 mai    4  2013 binary3.c
sh-4.2$ cat .passwd 
;/2d9a9d6Ea!s

——————————————————————————

disais main avec gdb.

j’ai fait un break après ce que je pensai être la bonne comparaison avec argv et le pass

j’ai afficher les caractère ascii, qui ce trouver a l’adresse 0x8048598. qui a a lettre placer dans edx.
ce la ma afficher.

gdb$ x/10c 0x8048598
0x8048598:	76 'L'	51 '3'	51 '3'	84 'T'	72 'H'	52 '4'	88 'X'	0 '\000'
0x80485a0:	65 'A'	99 'c'

j’ai alors tester cette chaine. qui ma donner l’accès correct et permis d’afficher le contenu de .passwd